/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package cm.clear.basic.calc;

import java.awt.event.ActionEvent;
import java.awt.event.KeyEvent;
import javax.swing.JButton;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import javax.swing.InputVerifier;
import javax.swing.JComponent;
import javax.swing.JTextField;
//import javax.swing.JOptionPane;

/**
 *
 * @author bryan
 */
public class CalculatorView extends javax.swing.JFrame {

    /**
     * Creates new form CalculatorView
     */
    public CalculatorView() {
        initComponents();
        this.setSize(700, 500);
        this.setLocationRelativeTo(null);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jRadioButtonMenuItem1 = new javax.swing.JRadioButtonMenuItem();
        jColorChooser1 = new javax.swing.JColorChooser();
        jColorChooser2 = new javax.swing.JColorChooser();
        popupMenu1 = new java.awt.PopupMenu();
        titleLabel = new javax.swing.JLabel();
        statusLabel = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        inputField = new javax.swing.JTextField();
        resultLabel = new javax.swing.JLabel();
        buttonsPanel = new javax.swing.JPanel();
        jButtonDELETE = new javax.swing.JButton();
        jButtonBRACKETOPENED = new javax.swing.JButton();
        jButtonBRACKETCLOSED = new javax.swing.JButton();
        jButtonEQUALS = new javax.swing.JButton();
        jButton7 = new javax.swing.JButton();
        jButton8 = new javax.swing.JButton();
        jButton9 = new javax.swing.JButton();
        jButtonDIVISION = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jButtonMULTIPLICATION = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButtonSUBTRACTION = new javax.swing.JButton();
        jButtonDOT = new javax.swing.JButton();
        jButton0 = new javax.swing.JButton();
        jButtonMODULO = new javax.swing.JButton();
        jButtonADDITION = new javax.swing.JButton();
        filler1 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 0), new java.awt.Dimension(32767, 32767));

        jRadioButtonMenuItem1.setSelected(true);
        jRadioButtonMenuItem1.setText("jRadioButtonMenuItem1");

        popupMenu1.setLabel("popupMenu1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(255, 255, 255));
        setLocationByPlatform(true);
        setSize(new java.awt.Dimension(400, 600));

        titleLabel.setFont(new java.awt.Font("Liberation Sans", 0, 18)); // NOI18N
        titleLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        titleLabel.setText("BRYAN Calculator");
        getContentPane().add(titleLabel, java.awt.BorderLayout.PAGE_START);

        statusLabel.setText("statusLabel");
        getContentPane().add(statusLabel, java.awt.BorderLayout.PAGE_END);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setLayout(new java.awt.BorderLayout());

        jPanel2.setLayout(new java.awt.GridLayout(2, 1));

        inputField.setBackground(new java.awt.Color(102, 255, 102));
        inputField.setFont(new java.awt.Font("Liberation Sans", 0, 24)); // NOI18N
        inputField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inputFieldActionPerformed(evt);
            }
        });
        inputField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                inputFieldKeyTyped(evt);
            }
        });
        jPanel2.add(inputField);

        resultLabel.setFont(new java.awt.Font("Liberation Sans", 1, 18)); // NOI18N
        resultLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        resultLabel.setText("Results here");
        jPanel2.add(resultLabel);

        jPanel1.add(jPanel2, java.awt.BorderLayout.NORTH);

        buttonsPanel.setFont(new java.awt.Font("Liberation Sans", 1, 15)); // NOI18N
        buttonsPanel.setLayout(new java.awt.GridLayout(5, 5));

        jButtonDELETE.setBackground(new java.awt.Color(255, 0, 0));
        jButtonDELETE.setText("<=");
        jButtonDELETE.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDELETEActionPerformed(evt);
            }
        });
        buttonsPanel.add(jButtonDELETE);

        jButtonBRACKETOPENED.setText("(");
        jButtonBRACKETOPENED.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonBRACKETOPENEDActionPerformed(evt);
            }
        });
        buttonsPanel.add(jButtonBRACKETOPENED);

        jButtonBRACKETCLOSED.setText(")");
        jButtonBRACKETCLOSED.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonBRACKETCLOSEDActionPerformed(evt);
            }
        });
        buttonsPanel.add(jButtonBRACKETCLOSED);

        jButtonEQUALS.setBackground(new java.awt.Color(0, 153, 0));
        jButtonEQUALS.setText("=");
        jButtonEQUALS.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonEQUALSActionPerformed(evt);
            }
        });
        buttonsPanel.add(jButtonEQUALS);

        jButton7.setFont(new java.awt.Font("Liberation Sans Narrow", 0, 15)); // NOI18N
        jButton7.setText("7");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });
        buttonsPanel.add(jButton7);

        jButton8.setText("8");
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });
        buttonsPanel.add(jButton8);

        jButton9.setText("9");
        jButton9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton9ActionPerformed(evt);
            }
        });
        buttonsPanel.add(jButton9);

        jButtonDIVISION.setText("/");
        jButtonDIVISION.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDIVISIONActionPerformed(evt);
            }
        });
        buttonsPanel.add(jButtonDIVISION);

        jButton4.setText("4");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });
        buttonsPanel.add(jButton4);

        jButton5.setText("5");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });
        buttonsPanel.add(jButton5);

        jButton6.setText("6");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });
        buttonsPanel.add(jButton6);

        jButtonMULTIPLICATION.setText("*");
        jButtonMULTIPLICATION.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonMULTIPLICATIONActionPerformed(evt);
            }
        });
        buttonsPanel.add(jButtonMULTIPLICATION);

        jButton1.setText("1");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        buttonsPanel.add(jButton1);

        jButton2.setText("2");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        buttonsPanel.add(jButton2);

        jButton3.setText("3");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        buttonsPanel.add(jButton3);

        jButtonSUBTRACTION.setText("-");
        jButtonSUBTRACTION.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSUBTRACTIONActionPerformed(evt);
            }
        });
        buttonsPanel.add(jButtonSUBTRACTION);

        jButtonDOT.setText(".");
        jButtonDOT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDOTActionPerformed(evt);
            }
        });
        buttonsPanel.add(jButtonDOT);

        jButton0.setText("0");
        jButton0.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton0ActionPerformed(evt);
            }
        });
        buttonsPanel.add(jButton0);

        jButtonMODULO.setText("%");
        jButtonMODULO.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonMODULOActionPerformed(evt);
            }
        });
        buttonsPanel.add(jButtonMODULO);

        jButtonADDITION.setText("+");
        jButtonADDITION.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonADDITIONActionPerformed(evt);
            }
        });
        buttonsPanel.add(jButtonADDITION);

        jPanel1.add(buttonsPanel, java.awt.BorderLayout.CENTER);
        jPanel1.add(filler1, java.awt.BorderLayout.PAGE_END);

        getContentPane().add(jPanel1, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void inputFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inputFieldActionPerformed

    }//GEN-LAST:event_inputFieldActionPerformed
    private void resultsLabelActionPerformed(java.awt.event.ActionEvent evt) {
        DisplayResult(evt);
        statusLabel.setText("RESULTS");
    }
    private void jButtonBRACKETOPENEDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonBRACKETOPENEDActionPerformed
        bracketsAndPoint(evt);
        statusLabel.setText("Button '(' pressed");
        getContentPane().add(statusLabel, java.awt.BorderLayout.PAGE_END);
        //jButtonBRACKETOPENED.setFont(new java.awt.Font("Liberation Sans Narrow", 1, 15));
    }//GEN-LAST:event_jButtonBRACKETOPENEDActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        processNumericInput(evt);
        statusLabel.setText("Button '4' pressed");
        //jButton4.setFont(new java.awt.Font("Liberation Sans Narrow", 1, 15));
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButtonDELETEActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDELETEActionPerformed

        processDeletion(1);
        statusLabel.setText("Delete Button pressed");
        //jButtonDELETE.setFont(new java.awt.Font("Liberation Sans Narrow", 1, 15));
    }//GEN-LAST:event_jButtonDELETEActionPerformed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        processNumericInput(evt);
        statusLabel.setText("Button '7' pressed");
        //jButton7.setFont(new java.awt.Font("Liberation Sans Narrow", 1, 15));
    }//GEN-LAST:event_jButton7ActionPerformed

    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton8ActionPerformed
        processNumericInput(evt);
        statusLabel.setText("Button '8' pressed");
        //jButton8.setFont(new java.awt.Font("Liberation Sans Narrow", 1, 15));
    }//GEN-LAST:event_jButton8ActionPerformed

    private void jButton9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton9ActionPerformed
        processNumericInput(evt);
        statusLabel.setText("Button '9' pressed");
        //jButton9.setFont(new java.awt.Font("Liberation Sans Narrow", 1, 15));
    }//GEN-LAST:event_jButton9ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        processNumericInput(evt);
        statusLabel.setText("Button '5' pressed");
        //jButton5.setFont(new java.awt.Font("Liberation Sans Narrow", 1, 15));
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        processNumericInput(evt);
        statusLabel.setText("Button '6' pressed");
        //jButton6.setFont(new java.awt.Font("Liberation Sans Narrow", 1, 15));
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        processNumericInput(evt);
        statusLabel.setText("Button '1' pressed");
        //jButton1.setFont(new java.awt.Font("Liberation Sans Narrow", 1, 15));
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed

        processNumericInput(evt);
        statusLabel.setText("Button '2' pressed");
        //jButton2.setFont(new java.awt.Font("Liberation Sans Narrow", 1, 15));
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        processNumericInput(evt);
        statusLabel.setText("Button '3' pressed");
        getContentPane().add(statusLabel, java.awt.BorderLayout.PAGE_END);
        //jButton3.setFont(new java.awt.Font("Liberation Sans Narrow", 1, 15));
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton0ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton0ActionPerformed
        processNumericInput(evt);
        statusLabel.setText("Button '0' pressed");
        getContentPane().add(statusLabel, java.awt.BorderLayout.PAGE_END);
        //jButton0.setFont(new java.awt.Font("Liberation Sans Narrow", 1, 15));
    }//GEN-LAST:event_jButton0ActionPerformed

    private void jButtonDIVISIONActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDIVISIONActionPerformed
        operationSigns(evt);
        statusLabel.setText("Button ' / ' pressed");
        getContentPane().add(statusLabel, java.awt.BorderLayout.PAGE_END);
        //jButtonDIVISION.setFont(new java.awt.Font("Liberation Sans Narrow", 1, 15));
    }//GEN-LAST:event_jButtonDIVISIONActionPerformed

    private void jButtonMULTIPLICATIONActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonMULTIPLICATIONActionPerformed
        operationSigns(evt);
        statusLabel.setText("Button '*' pressed");
        getContentPane().add(statusLabel, java.awt.BorderLayout.PAGE_END);
        //jButtonMULTIPLICATION.setFont(new java.awt.Font("Liberation Sans Narrow", 1, 15));
    }//GEN-LAST:event_jButtonMULTIPLICATIONActionPerformed

    private void jButtonSUBTRACTIONActionPerformed(java.awt.event.ActionEvent evt) {                                                   
        operationSigns(evt);
        statusLabel.setText("Button '-' pressed");
        getContentPane().add(statusLabel, java.awt.BorderLayout.PAGE_END);
        //jButtonSUBTRACTION.setFont(new java.awt.Font("Liberation Sans Narrow", 1, 15));
    }

    private void jButtonADDITIONActionPerformed(java.awt.event.ActionEvent evt) {                                                
        operationSigns(evt);
        statusLabel.setText("Button '+' pressed");
        getContentPane().add(statusLabel, java.awt.BorderLayout.PAGE_END);
        //jButtonADDITION.setFont(new java.awt.Font("Liberation Sans Narrow", 1, 15));
    }

    private void jButtonBRACKETCLOSEDActionPerformed(java.awt.event.ActionEvent evt) {                                                     
        bracketsAndPoint(evt);
        statusLabel.setText("Button ')' pressed");
        getContentPane().add(statusLabel, java.awt.BorderLayout.PAGE_END);
        //jButtonBRACKETCLOSED.setFont(new java.awt.Font("Liberation Sans Narrow", 1, 15));
    }

    private void jButtonDOTActionPerformed(java.awt.event.ActionEvent evt) {                                           
        bracketsAndPoint(evt);
        statusLabel.setText("Button '.' pressed");
        getContentPane().add(statusLabel, java.awt.BorderLayout.PAGE_END);
        //jButtonDOT.setFont(new java.awt.Font("Liberation Sans Narrow", 1, 15));
    }

    private void jButtonMODULOActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonMODULOActionPerformed
       // processClear(evt);
        statusLabel.setText("Clear Button pressed");
        getContentPane().add(statusLabel, java.awt.BorderLayout.PAGE_END);
        //jButtonMODULO.setFont(new java.awt.Font("Liberation Sans Narrow", 1, 15));
    }//GEN-LAST:event_jButtonMODULOActionPerformed

    private void jButtonEQUALSActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonEQUALSActionPerformed

        statusLabel.setText("Button '=' pressed");
        DisplayResult(evt);
        getContentPane().add(statusLabel, java.awt.BorderLayout.PAGE_END);
        //jButtonEQUALS.setFont(new java.awt.Font("Liberation Sans Narrow", 1, 15));
    }//GEN-LAST:event_jButtonEQUALSActionPerformed

    private void inputFieldKeyTyped(java.awt.event.KeyEvent evt) {                                    
        // TODO add your handlin'g code here:
        char[] allowed = new char[]{'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '+', '-', '/', '*', '(', ')', '.'};
        for (int i = 0; i < allowed.length; i++) {
            if (evt.getKeyChar() != (allowed[i])) {

                evt.consume();
                //System.out.println(evt.getKeyChar());
            } else {
                char c = evt.getKeyChar();
                //System.out.println("VALID : " + evt.getKeyChar());

                processNumericInputTyped(evt);

            }
        }
    }
    private void processDeletion(int numberOfChars) {
        String currentValue = inputField.getText();
        if (currentValue.length() > 0) {
            String newValue = currentValue.substring(0, currentValue.length() - numberOfChars);
            inputField.setText(newValue);
        }
    }

    private void processClear(){
        String currentValue = inputField.getText();
        if(currentValue.length() > 0){
            String newValue = currentValue.substring(0, currentValue.length());
            inputField.setText(newValue);
        }
    }

    private void processNumericInputTyped(java.awt.event.KeyEvent evt) {
        String currentValue = inputField.getText();
        String pressedValue = "" + evt.getKeyChar();
        inputField.setText(currentValue + pressedValue);
    }

    private void processNumericInput(java.awt.event.ActionEvent evt) {
        String currentValue = inputField.getText();

        String pressedValue = "";
        if (evt.getSource() instanceof JButton) {
            pressedValue = ((JButton) evt.getSource()).getText();
        }

        inputField.setText(currentValue + pressedValue);
    }

    private void operationSigns(java.awt.event.ActionEvent evt) {
        String currentValue = inputField.getText();
        String pressedValue = ((JButton) evt.getSource()).getText();
        List<String> unaccepted = new ArrayList<>();
        unaccepted.add("/");
        unaccepted.add("*");
        unaccepted.add("%");
        if (currentValue.charAt(currentValue.length() - 1) == '+' || currentValue.charAt(currentValue.length() - 1) == '-') {
            if (unaccepted.contains(pressedValue)) {

            } else {
                inputField.setText(currentValue + pressedValue);
            }
        } else if (currentValue.charAt(currentValue.length() - 1) == '/' || currentValue.charAt(currentValue.length() - 1) == '*') {
            if (unaccepted.contains(pressedValue)) {
            } else {
                inputField.setText(currentValue + pressedValue);
            }
        } else {
            inputField.setText(currentValue + pressedValue);
        }

    }

    private void specialCases(java.awt.event.ActionEvent evt) {
        String pressedValue = "";
        String currentValue = inputField.getText();
        char[] acceptedNumbers = new char[]{'0', '1', '2', '3', '4', '5', '6', '7', '8', '9'};
        char[] acceptedOperators = new char[]{'+', '-', '/', '*'};

        boolean isOperator = false;
        for (int i = 0; i < acceptedOperators.length; i++) {
            //IF THE LAST VALUE IS AN OPERATOR, PERFORM THIS
            if (currentValue.charAt(currentValue.length() - 1) != acceptedOperators[i]) {
                inputField.setText(currentValue + pressedValue);
                System.out.println("InputField :  " + inputField);
            } //IF THE LAST VALUE IS NOT AN OPERATOR, PERFORM THIS
            else {
                isOperator = true;
                break;
            }
        }

        //IF THE LAST VALUE IS NOT AN OPERATOR, PERFORM THIS
        if (isOperator) {
            inputField.setText(currentValue + pressedValue);

        }

        //IF THE LAST VALUE IS AN OPERATOR, PERFORM THIS
        boolean isNumber = false;
        for (int j = 0; j < acceptedNumbers.length; j++) {
            if (currentValue.charAt(currentValue.length() - 1) != acceptedNumbers[j]) {
                inputField.setText(currentValue + pressedValue);
                System.out.println("InputField is : " + inputField);

            } else {
                isNumber = true;
                break;
            }
            if (isNumber) {
                
            }
        }

        if (currentValue.charAt(currentValue.length() - 1) == '(') {
            inputField.setText(currentValue + pressedValue);

        }
    }

    private void bracketsAndPoint(java.awt.event.ActionEvent evt) {
        String currentValue = inputField.getText();
        String pressedValue = ((JButton) evt.getSource()).getText();

        inputField.setText(currentValue + pressedValue);
    }

    /*private void Invalidinput(java.awt.event.ActionEvent evt) {
        String currentValue = inputField.getText();
         if (currentValue.charAt(currentValue.length()-1) != '+') {
            String pressedValue = ((JButton) evt.getSource()).getText();
            inputField.setText(currentValue + pressedValue);
        } else {
            
        }
    }*/

 private void displayName(java.awt.event.ActionEvent evt){
         statusLabel.setText("Button  pressed");
        getContentPane().add(statusLabel, java.awt.BorderLayout.PAGE_END);

    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CalculatorView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CalculatorView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CalculatorView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CalculatorView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CalculatorView().setVisible(true);
            }
        });
    }

    // Variables declaration
    private javax.swing.JPanel buttonsPanel;
    private javax.swing.Box.Filler filler1;
    private javax.swing.JTextField inputField;
    private javax.swing.JButton jButton0;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private javax.swing.JButton jButton9;
    private javax.swing.JButton jButtonADDITION;
    private javax.swing.JButton jButtonBRACKETCLOSED;
    private javax.swing.JButton jButtonBRACKETOPENED;
    private javax.swing.JButton jButtonDELETE;
    private javax.swing.JButton jButtonDIVISION;
    private javax.swing.JButton jButtonDOT;
    private javax.swing.JButton jButtonEQUALS;
    private javax.swing.JButton jButtonMODULO;
    private javax.swing.JButton jButtonMULTIPLICATION;
    private javax.swing.JButton jButtonSUBTRACTION;
    private javax.swing.JColorChooser jColorChooser1;
    private javax.swing.JColorChooser jColorChooser2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JRadioButtonMenuItem jRadioButtonMenuItem1;
    private java.awt.PopupMenu popupMenu1;
    private javax.swing.JLabel resultLabel;
    private javax.swing.JLabel statusLabel;
    private javax.swing.JLabel titleLabel;
    // End of variables declaration

    private void DisplayResult(java.awt.event.ActionEvent evt) {

        String fullText = this.inputField.getText();
        //JOptionPane.showMessageDialog(null, fullText);
        //String[] operators = {"/", "*", "+", "-"};
        String[] operators = {"-", "+", "*", "/"};

        try {

            List<Integer> opOccurences = successiveOperatorsOccurence(fullText, operators);
            if (opOccurences.isEmpty()) {
                resultLabel.setText("NO INPUT");

            } else {
                double result = evaluateWithOperators(fullText, operators);
                resultLabel.setText("" + result);

            }
        } catch (NumberFormatException nfe) {
            System.out.println(nfe.getMessage());
            resultLabel.setText(nfe.getMessage());
        }

    }

    /**
     *
     * @param fullText
     * @param op
     * @return
     */
    private List<Integer> successiveOperatorsOccurence(String fullText, String[] ops) 
        throws NumberFormatException {
        List<Integer>operatorsPositions = new ArrayList();
        for (int i = 0; i < ops.length; i++) {
            int posInFullText = 0;
            while (fullText.indexOf(ops[i], posInFullText) != -1) {
                int position = fullText.indexOf(ops[i], posInFullText);
                posInFullText = position + 1;
                operatorsPositions.add(position);
                System.out.println("Position of operator is : " + position);
                //System.out.println("Next position in fullText: " + posInFullText);

                if (posInFullText >= fullText.length()) {
                    break;
                }
            }
        }

        Collections.sort(operatorsPositions);
        System.out.println(operatorsPositions.toString());
        for (int i = 0; i < operatorsPositions.size(); i++) {
            if (i < operatorsPositions.size() - 1 && (operatorsPositions.get(i) - operatorsPositions.get(i + 1) == 1)) {
                System.out.println("***************** Differences is 1 ");
                throw new NumberFormatException("Invalid operator position");

            } else {
                
            }
        }

        return operatorsPositions;

    }

    /**
     *
     * @param fullText
     * @param op
     * @return
     */
    private boolean checkingOperators(String fullText, String[] ops) {

        return false;
    }

    private double evaluateWithOperators(String fullText, String[] ops) {

        for (int i = 0; i < ops.length; i++) {

            System.out.println("--- " + fullText);
            System.out.println("---Evaluating :  " + ops[i]);

            if (fullText.contains(ops[i])) {
                System.out.println("---Evaluating :  " + ops[i] + " = POSITIVE");

                //String[] blocks = fullText.split(ops[i]);//(THIS WAS DISTURBING SO I HAD TO USE THE METHOD "SPLITSTRINGWITHOPERATOR"
                //SPLIT MANUALLY)
                List<String> blocks = splitStringWithOperator(fullText, ops[i]);
                double calculatedValue = 0;
                System.out.println("\n- SIZE OF BLOCKS : " + blocks.size());

                for (String block : blocks) {

                    System.out.println("\n- WHOAMI (" + i + ")----(" + block + ")");

                    try {
                        //USING "PARSE" TO CONVERT THE STRING INTO A DOUBLE 
                        double numValue = Double.parseDouble(block);
                        System.out.println("\n- INSIDE NUMERICAL : " + block);

                        calculatedValue = calculate(calculatedValue, numValue, ops[i]);
                        System.out.println("\n- CALC VALUE : " + calculatedValue);

                    } catch (NumberFormatException nfe) {

                        System.out.println("\n- INSIDE NON NUMERICAL-----" + block);
                        double recursiveValue = evaluateWithOperators(block, ops);
                        calculatedValue = calculate(calculatedValue, recursiveValue, ops[i]);

                        System.out.println("Recursive Value is : " + recursiveValue);
                    }
                }

                System.out.println("---Total is :  " + calculatedValue + " for " + ops[i]);
                //resultLabel.setText(""+calculatedValue);

                return calculatedValue;

            } else {
                System.out.println("---Evaluating :  " + ops[i] + " = NEGATIVE");
            }
        }

        return 0;
    }

    private List<String> splitStringWithOperator(String fullText, String ope) {
        List<String> tokens = new ArrayList();

        String checkedText = fullText;
        while (checkedText.indexOf(ope) != -1) {
            System.out.println("********* checkedText= [" + checkedText + "]");
            System.out.println("********* checkedText.indexOf(ope)= [" + checkedText.indexOf(ope) + "]");

            //GETTING THE POSITION OF THE OPERATION SIGN
            int pos = checkedText.indexOf(ope);

            //GETTING THE FIRST PART OF THE EQUATION (WHICH IS UP TO THE POSITION OF THE OPERATOR)
            //AND ADDING IT TO THE LIST TOKENS.
            String first = checkedText.substring(0, pos);
            tokens.add(first);

            checkedText = checkedText.substring(pos + 1, checkedText.length());

        }

        tokens.add(checkedText);

        for (String t : tokens) {
            System.out.println("********* Token = [" + t + "]");
        }

        return tokens;
    }

    /*
    * Operations.
     */
    private double calculate(double calculatedValue, double currentValue, String operator) {

        if (operator.equals("*")) {
            //THIS IS A NEW SYNTAX OF AN IF ELSE.(CHECK THE INTERNET FOR MORE)
            return (calculatedValue == 0) ? 1 * currentValue : calculatedValue * currentValue;
        }
        if (operator.equals("/")) {
            if (currentValue != 0) {
                return (calculatedValue == 0) ? currentValue / 1 : calculatedValue / currentValue;
            } else {
                throw new NumberFormatException("Division by zero is invalid");

            }
        }
        if (operator.equals("+")) {
            return (calculatedValue == 0) ? 0 + currentValue : calculatedValue + currentValue;
        }
        if (operator.equals("-")) {
            return (calculatedValue == 0) ? currentValue : calculatedValue - currentValue;
        }

        return 0;
    }
}